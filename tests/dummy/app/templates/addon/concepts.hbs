<section class="card">
  <div class="card-body">


    <h1 class="card-title">
      Addon Concepts
    </h1>
    <hr />


    <p class="lead">
      In addition to ember-froala-editor specific concepts, this page explains how some of the Froala Editor concepts would be applied in ember land.
    </p>


    <h3>Concepts</h3>
    <div class="row lead">
      <ul class="col-sm-6 list-unstyled">
        <li>{{link-to "Apply editor key" (query-params section="key")}}</li>
        <li>{{link-to "Autosave" (query-params section="autosave")}}</li>
        <li>{{link-to "Custom Buttons, Plugins, etc." (query-params section="custom")}}</li>
      </ul>
      <ul class="col-sm-6 list-unstyled">
        <li>{{link-to "Defaults" (query-params section="defaults")}}</li>
        <li>{{link-to "Image Uploading / Deleting" (query-params section="image")}}</li>
        <li>{{link-to "Hide on-blur" (query-params section="hide")}}</li>
      </ul>
    </div>


  </div>{{!-- .card-body --}}
</section>{{!-- .card --}}




<section class="card" id="key">
  <div class="card-body">


    <h2 class="card-title">
      Apply editor key
    </h2>


    <p>
      Since Froala WYSIWYG Editor is a paid product, there is an <a href="https://www.froala.com/wysiwyg-editor/faq#activation-key" target="_blank">activation key</a> that must be applied when using the editor. There are a couple ways to apply the key to all <code class="bg-light text-dark">&#123;&#123;froala-editor&#125;&#125;</code> instances.
    </p>


    <h4>A. Environment Config File</h4>
    <p>Within the <code class="bg-light text-dark">config/environment.js</code> <code class="bg-light text-dark">ENV</code> object/hash, define a <code class="bg-light text-dark">'ember-froala-editor'</code> object/hash and add the <code class="bg-light text-dark">key</code> there. Note: This is NOT the same location where you put {{link-to "build-time configuration options" "addon.configuration"}} (AKA <code class="bg-light text-dark">ember-cli-build.js</code>).</p>


    <h5>config/environment.js</h5>
    <pre class="bg-light border rounded p-2 text-dark">'use strict';

module.exports = function(environment) {
  var ENV = {

    // (other default code snipped...)

    <strong>'ember-froala-editor': {
      key: '_YOUR_KEY_HERE_'
    }</strong>

  };

  // ... (other default code snipped...)

  return ENV;
};</pre>


    <h4>B. Defaults Concept</h4>
    <p>The other way is to apply the key is using the {{link-to "defaults concept" (query-params section="defaults")}}. This is a good choice if you plan on changing other options for all <code class="bg-light text-dark">&#123;&#123;froala-editor&#125;&#125;</code> instances. <code class="bg-light text-dark">ember g component froala-editor</code> and then delete the generated template (or else the editor won't render)</p>


    <h5>app/components/froala-editor.js</h5>
    <pre class="bg-light border rounded p-2 text-dark">import FroalaEditorComponent from 'ember-froala-editor/components/froala-editor';

export default FroalaEditorComponent.extend({

  <strong>options: {
    key: '_YOUR_KEY_HERE_'
  },</strong>

  // OR

  <strong>key: '_YOUR_KEY_HERE_'</strong>

});</pre>


  </div>{{!-- .card-body --}}
</section>{{!-- .card --}}




<section class="card" id="autosave">
  <div class="card-body">


    <h2 class="card-title">
      Autosave
    </h2>


    <p>
      <a href="https://www.froala.com/wysiwyg-editor/docs/concepts/save/autosave" target="_blank">Auto-saving</a> in ember is very much dependent on each use case. However, below is a rough overview on one possible solution using ember-data and a debounced save method. It will <code class="bg-light text-dark">.save()</code> the model 3 seconds after the content last changed. <a href="https://emberjs.com/api/ember/2.18/classes/@ember%2Frunloop/methods/debounce?anchor=debounce" target="_blank">Debounce</a> is important here, since you could overload the server if saved for <em>every</em> content change.
    </p>


    <h5>app/controllers/foobar.js</h5>
    <pre class="bg-light border rounded p-2 text-dark">import Controller from '@ember/controller';
import { debounce } from '@ember/runloop';

export default Controller.extend({

  getModelSave() {
    this.get('model').save();
  },

  actions: {
    setAndSave( html ) {
      this.set('model.someProp', html);
      debounce(
        this,
        this.getModelSave,
        3000 // 3 seconds
      ); // debounce()
    } // setAndSave()
  } // :actions

});</pre>


    <h5>app/templates/foobar.hbs</h5>
    <pre class="bg-light border rounded p-2 text-dark">&#123;&#123;froala-editor
  content=model.someProp
  update=(action "setAndSave")
&#125;&#125;</pre>


  </div>{{!-- .card-body --}}
</section>{{!-- .card --}}




<section class="card" id="custom">
  <div class="card-body">


    <h2 class="card-title">
      Custom Buttons, Plugins, etc.
    </h2>


    <p>
      <a href="https://www.froala.com/wysiwyg-editor/docs/concepts/custom/plugin" target="_blank">Custom plugins</a>, <a href="https://www.froala.com/wysiwyg-editor/docs/concepts/custom/button" target="_blank">custom buttons</a>, <a href="https://www.froala.com/wysiwyg-editor/docs/concepts/custom/dropdown" target="_blank">custom dropdowns</a>, <a href="https://www.froala.com/wysiwyg-editor/docs/concepts/custom/icon" target="_blank">custom icons</a>, <a href="https://www.froala.com/wysiwyg-editor/docs/concepts/custom/popup" target="_blank">custom popups</a>, <a href="https://www.froala.com/wysiwyg-editor/docs/concepts/custom/shortcut" target="_blank">custom shortcuts</a> (Froala has many <a href="https://www.froala.com/wysiwyg-editor/docs/examples" target="_blank">examples</a>, search for "custom") should all be placed in an <a href="https://guides.emberjs.com/v2.18.0/applications/initializers/#toc_application-initializers" target="_blank">ember application initializer</a>. Just be sure to <code class="bg-light text-dark">import</code> jquery to avoid a linting error. By using an initializer, these customizations will be properly applied once, and available to all <code class="bg-light text-dark">&#123;&#123;froala-editor&#125;&#125;</code>'s in your project.
    </p>


    <h5>app/initializers/froala-custom.js</h5>
    <pre class="bg-light border rounded p-2 text-dark">import $ from 'jquery';

export function initialize(application) {

  // custom plugins
  (function ($) {
    // your custom plugin code here
  })($);

  // custom icons
  $.FroalaEditor.DefineIcon('buttonIcon', { NAME: 'star'});

  // custom buttons
  $.FroalaEditor.RegisterCommand('myButton', {
    // your custom button code here
  });

  // you get the idea...

};

export default {
  name: 'froala-custom',
  initialize: initialize
};</pre>


    <p>Note: You can split each customization up between multiple initializers, the example above is just a general overview.</p>


  </div>{{!-- .card-body --}}
</section>{{!-- .card --}}




<section class="card" id="defaults">
  <div class="card-body">


    <h2 class="card-title">
      Defaults
    </h2>


    <p>
      The {{link-to "froala-editor component" "addon-components.froala-editor"}} was created with extending and applying defaults in mind. You can simply <code class="bg-light text-dark">ember g component froala-editor</code>, <strong>delete the generated template (or else the editor won't render)</strong>, and <code class="bg-light text-dark">.extend()</code> this addons version to override it, providing "default" properties. That way you can still use the same component name in your templates, <code class="bg-light text-dark">&#123;&#123;froala-editor&#125;&#125;</code>. You would just define the {{link-to "options" "addon-components.froala-editor" (query-params section="options")}}, {{link-to "event handlers" "addon-components.froala-editor" (query-params section="events")}}, or other {{link-to "component attributes" "addon-components.froala-editor" (query-params section="attributes")}} as properties. This is a great way to define a common theme and even your Froala Editor key!
    </p>


    <h5>app/components/froala-editor.js</h5>
    <pre class="bg-light border rounded p-2 text-dark">import FroalaEditorComponent from 'ember-froala-editor/components/froala-editor';

export default FroalaEditorComponent.extend({

  options : {
    key   : '_YOUR_KEY_HERE_',
    theme : 'red'
  },

  'on-blur' : function() {
    // maybe a default save action
  }

});</pre>


    <p>
      Note: Use the options object/hash when defining defaults, that way they are properly overridden when an instance defines a different option value. Because default options defined as individual properties will not be overridden if the instance defines the same option using the object/hash. Ex: Extended froala-editor has <code class="bg-light text-dark">theme:"red"</code> but <code class="bg-light text-dark">&#123;&#123;froala-editor options=(hash theme="royal")&#125;&#125;</code>. In this case <code class="bg-light text-dark">"red"</code> would win, because it's technically defined as an "individual attribute".
    </p>


  </div>{{!-- .card-body --}}
</section>{{!-- .card --}}




<section class="card" id="image">
  <div class="card-body">


    <h2 class="card-title">
      Image Uploading / Deleting
    </h2>


    <p>
      <a href="https://www.froala.com/wysiwyg-editor/docs/concepts/image/upload" target="_blank">Image uploading</a> and <a href="https://www.froala.com/wysiwyg-editor/docs/concepts/image/delete" target="_blank">image deleting</a> could be a combination of {{link-to "event actions" "addon-components.froala-editor" (query-params section="events")}} and <a href="https://github.com/ember-cli/ember-ajax" target="_blank">ember-ajax</a>. In addition, you could define these for <em>all</em> <code class="bg-light text-dark">&#123;&#123;froala-editor&#125;&#125;</code> instances by using the {{link-to "defaults concept" (query-params section="defaults")}}. While uploading an image could be handled with the built-in Froala Editor options, here is an example of deleting an image from the server.
    </p>


    <h5>app/controllers/foobar.js</h5>
    <pre class="bg-light border rounded p-2 text-dark">import Controller from '@ember/controller';
import { inject as service } from '@ember/service';

export default Controller.extend({

  ajax: service(),

  actions: {
    deleteImage( component, $img ) {
      this.get('ajax').post(
        '/image_delete',
        { data: {
          src: $img.attr('src')
        } }
      ); // post()
    } // deleteImage()
  } // :actions

});</pre>


    <h5>app/templates/foobar.hbs</h5>
    <pre class="bg-light border rounded p-2 text-dark">&#123;&#123;froala-editor on-image-removed=(action "deleteImage")&#125;&#125;</pre>


  </div>{{!-- .card-body --}}
</section>{{!-- .card --}}




<section class="card" id="hide">
  <div class="card-body">


    <h2 class="card-title">
      Hide on-blur
    </h2>


    <p>
      You can create a neat effect where the editor is "shown" only when it is used. It takes a combination of the <a href="https://www.froala.com/wysiwyg-editor/docs/options#initOnClick" target="_blank">initOnClick option</a>, <a href="https://www.froala.com/wysiwyg-editor/docs/events#blur" target="_blank">on-blur event</a>, and <code class="bg-light text-dark">reinit()</code> method. Note: You will lose the undo/redo stack however.
    </p>


    {{froala-editor
      content="<p>Click here and then click away for an example...</p>"
      options=(hash initOnClick=true height=50 toolbarButtons="bold italic undo redo")
      on-blur=(froala-method "reinit")}}


    <h5>app/templates/foobar.hbs</h5>
    <pre class="bg-light border rounded p-2 text-dark">&#123;&#123;froala-editor options=(hash initOnClick=true) on-blur=(froala-method "reinit")&#125;&#125;</pre>


    <p>
      Or, you can make this a {{link-to "default effect" (query-params section="defaults")}} by extending the froala-editor component and calling the internal <code class="bg-light text-dark">reinitEditor()</code> method.
    </p>


    <h5>app/components/froala-editor.js</h5>
    <pre class="bg-light border rounded p-2 text-dark">import FroalaEditorComponent from 'ember-froala-editor/components/froala-editor';

export default FroalaEditorComponent.extend({

  options : {
    initOnClick: true
  },

  'on-blur' : function() {
    this.reinitEditor();
  }

});</pre>


  </div>{{!-- .card-body --}}
</section>{{!-- .card --}}
